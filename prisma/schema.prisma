// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum IndustryType {
  HEALTHCARE
  BEAUTY
  WELLNESS
  SPORTS
  CULINARY
  BARBERSHOPS
  EDUCATION
  OTHERS
}

enum Locale {
  EN
  PT
}

enum IdentityProvider {
  MARKADO
  GOOGLE
}

enum BusinessLocationType {
  ONLINE
  IN_PERSON
}

enum BrazilianStatesAcronyms {
  AC // Acre
  AL // Alagoas
  AP // Amapá
  AM // Amazonas
  BA // Bahia
  CE // Ceará
  DF // Distrito Federal
  ES // Espírito Santo
  GO // Goiás
  MA // Maranhão
  MT // Mato Grosso
  MS // Mato Grosso do Sul
  MG // Minas Gerais
  PA // Pará
  PB // Paraíba
  PR // Paraná
  PE // Pernambuco
  PI // Piauí
  RJ // Rio de Janeiro
  RN // Rio Grande do Norte
  RS // Rio Grande do Sul
  RO // Rondônia
  RR // Roraima
  SC // Santa Catarina
  SP // São Paulo
  SE // Sergipe
  TO // Tocantins
}

model User {
  id                  String            @id @default(cuid())
  name                String?
  username            String?
  email               String
  emailVerified       DateTime?
  biography           String?
  image               String?
  timeZone            String            @default("America/Sao_Paulo")
  completedOnboarding Boolean           @default(false)
  availability        Availability[]
  defaultScheduleId   Int?
  schedules           Schedule[]
  locale              Locale?           @default(PT)
  identityProvider    IdentityProvider? @default(MARKADO)
  password            UserPassword?
  accounts            Account[]
  sessions            Session[]
  Authenticator       Authenticator[]
  // Google Calendar & Meet integration
  googleAccessToken   String?
  googleRefreshToken  String?
  googleTokenExpiry   BigInt?
  selectedCalendarId  String?
  calendars           Calendar[]
  googleMeetEnabled   Boolean           @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email])
  @@unique([email, username])
  @@index([username])
  @@index([emailVerified])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model UserPassword {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Availability {
  id         Int       @id @default(autoincrement())
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  days       Int[]
  startTime  DateTime  @db.Time
  endTime    DateTime  @db.Time
  date       DateTime? @db.Date
  schedule   Schedule? @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId Int?

  @@index([userId])
  @@index([scheduleId])
}

model Schedule {
  id           Int            @id @default(autoincrement())
  name         String
  timeZone     String?
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  availability Availability[]

  @@index([userId])
}

model BusinessLocation {
  id           Int                     @id @default(autoincrement())
  cep          String
  state        BrazilianStatesAcronyms
  city         String
  neighborhood String
  street       String
  number       String
  complement   String

  team Team[]
}

model Team {
  id                 Int              @id @default(autoincrement())
  name               String
  industryType       IndustryType?
  slug               String?
  linkedinUrl        String?
  twitterUrl         String?
  instagramUrl       String?
  businessLocation   BusinessLocation @relation(fields: [businessLocationId], references: [id])
  businessLocationId Int

  @@unique([slug])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Calendar {
  id          String  @id @default(cuid())
  googleId    String
  name        String
  description String?
  primary     Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([googleId, userId])
  @@index([userId])
}
