const {generatorHandler} = require('@prisma/generator-helper');
const fs = require('fs');
const path = require('path');

interface DMMF {
  datamodel: {
    enums: Array<{
      name: string;
      values: Array<{
        name: string;
      }>;
    }>;
  };
}

interface GeneratorOptions {
  generator: {
    output: {
      value: string;
    } | null;
  };
  dmmf: DMMF;
}

const header = `// This file was generated by a custom prisma generator, do not edit manually.\n`;

generatorHandler({
  onManifest() {
    return {
      defaultOutput: './enums/index.ts',
      prettyName: 'Prisma Enum Generator'
    };
  },
  async onGenerate(options: GeneratorOptions) {
    const enums = options.dmmf.datamodel.enums;

    const output = enums.map((enumDef) => {
      let enumString = `export const ${enumDef.name} = {\n`;
      enumDef.values.forEach(({name: value}) => {
        enumString += `  ${value}: "${value}",\n`;
      });
      enumString += `} as const;\n\n`;
      enumString += `export type ${enumDef.name} = (typeof ${enumDef.name})[keyof typeof ${enumDef.name}];\n`;

      return enumString;
    });

    const outputFile = options.generator.output;
    if (!outputFile || !outputFile.value) {
      throw new Error('No output file specified');
    }

    const outputPath = path.resolve(outputFile.value);
    await fs.promises.mkdir(path.dirname(outputPath), {recursive: true});
    await fs.promises.writeFile(
      outputPath,
      header + output.join('\n'),
      'utf-8'
    );
  }
});
